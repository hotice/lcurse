#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this script is based on the wowcurse.py from JörnS user from ubuntuusers.de
# I will try to improve it (Thilo Cestonaro)

# JörnS published it under the CC0
# http://creativecommons.org/publicdomain/zero/1.0/


import os, sys, cookielib, urllib2, csv, pynotify, time
from os.path import *

from urlparse import urlparse
from ConfigParser import RawConfigParser
from zipfile import ZipFile
from bs4 import BeautifulSoup
from PyQt4 import QtCore, QtGui, QtWebKit, QtNetwork

SETTINGS_FILE = '~/.lcurse/settings.cfg'
ADDONS_FILE = '~/.lcurse/addons.csv'

addons = []

pynotify.init('Basics')

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
# default User-Agent ('Python-urllib/2.6') will *not* work
opener.addheaders = [('User-Agent', 'Mozilla/5.0'),]

config = RawConfigParser()
appfolder = os.path.dirname(sys.argv[0])
windowIcon = appfolder + "/media/icon.png"

try:
    if not os.path.exists(os.path.expanduser('~/.lcurse')):
        os.mkdir(os.path.expanduser('~/.lcurse'))
    config.read(os.path.expanduser(SETTINGS_FILE))
    prefix = config.get('Settings', 'Prefix')
    wowinstalldir = config.get('Settings', 'WowInstallDir')
    arch = config.getint('Settings', 'Arch')
    bumblebee = config.get('Settings', 'Bumblebee')
except:
    if not config.has_section('Settings'):
        config.add_section('Settings')
    prefix = '.wine'
    wowinstalldir = 'Program Files (x86)/World of Warcraft'
    arch = 32
    bumblebee = 'none'
    config.set('Settings', 'Prefix', prefix)
    config.set('Settings', 'WowInstallDir', wowinstalldir)
    config.set('Settings', 'Arch', arch)
    config.set('Settings', 'Bumblebee', bumblebee)
    
    with open(os.path.expanduser(SETTINGS_FILE), 'wb') as configfile:
        config.write(configfile)

bitdict = {64: 'WoW-64.exe', 32: 'WoW.exe'}

bumbledict = {'primus': 'optirun -b primus wine', 'bumblebee': 'optirun wine', 'none': 'wine'}

def currTime():
    return time.strftime("%H:%M:%S", time.localtime())

def getFile(url):
    print "Looking for zipped addon at: ", url
    response = opener.open(url)
    data = response.read()
    filename = url.split('/')[-1]
    with open('/tmp/{}'.format(filename), 'wb') as zipped:
        zipped.write(data)
    zipped = ZipFile('/tmp/{}'.format(filename))
    zipped.extractall(os.path.expanduser('~/{}/drive_c/{}/Interface/AddOns/'.format(prefix, wowinstalldir)))
    os.remove('/tmp/{}'.format(filename))
    return filename

class UpdateAddons(QtCore.QThread):
    def __init__(self):
        QtCore.QThread.__init__(self)

    def __del__(self):
        self.wait()

    def run(self):
        for i in range(len(addons)):
            self.emit(QtCore.SIGNAL("checkingForUpdate(int)"), i)
            try:
                # default User-Agent ('Python-urllib/2.6') will *not* work
                response = opener.open(str(addons[i][1] + '/download'))
            except urllib2.HTTPError as e:
                print e
                self.emit(QtCore.SIGNAL("addonNotFound(int)"), i)
                continue

            html = response.read()

            soup = BeautifulSoup(html)
            for link in soup.findAll('a'):
                zipfile = link.get('data-href')
                if zipfile != None:
                    if len(addons[i]) == 1:
                        version = getFile(zipfile)
                        addons[i].append(version)
                        self.emit(QtCore.SIGNAL("updated(int)"), i)
                    elif os.path.basename(zipfile) != addons[i][2]:
                        version = getFile(zipfile)
                        addons[i][2] = version
                        self.emit(QtCore.SIGNAL("updated(int)"), i)
                    else:
                        self.emit(QtCore.SIGNAL("noUpdateNeeded(int)"), i)

class WoWCurseWindow(QtGui.QWidget):
    def __init__(self, parent = None):
        QtGui.QWidget.__init__(self, parent)
        
        self.updater = UpdateAddons();
        self.connect( self.updater, QtCore.SIGNAL("checkingForUpdate(int)"), self.handleCheckingForUpdate )
        self.connect( self.updater, QtCore.SIGNAL("addonNotFound(int)"), self.handleAddonNotFound )
        self.connect( self.updater, QtCore.SIGNAL("updated(int)"), self.handleUpdated )
        self.connect( self.updater, QtCore.SIGNAL("noUpdateNeeded(int)"), self.handleNoUpdateNeeded )
        self.connect( self.updater, QtCore.SIGNAL("finished()"), self.handleFinished )

        self.resize(800, 600)
        self.setWindowTitle('WoW!Curse')
        self.setWindowIcon(QtGui.QIcon(windowIcon))
        
        screen = QtGui.QDesktopWidget().screenGeometry()
        size = self.geometry()
        self.move((screen.width()-size.width())/2, (screen.height()-size.height())/2)
        
        settings = QtGui.QPushButton('Settings')
        self.connect(settings, QtCore.SIGNAL('clicked()'), settings_widget.show)
        
        add = QtGui.QPushButton(u'Add a new addon')
        self.connect(add, QtCore.SIGNAL('clicked()'), self.getNewAddon)
        
        update = QtGui.QPushButton('Install/Update addons')
        self.connect(update, QtCore.SIGNAL('clicked()'), self.updateAddons)
        
        start = QtGui.QPushButton('Start game')
        self.connect(start, QtCore.SIGNAL('clicked()'), self.startWoW)
        
        self.table = QtGui.QTableWidget()
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(QtCore.QStringList() << "Name" << "Url" << "Version")
        self.connect(self.table, QtCore.SIGNAL("cellChanged(int, int)"), self.handleItemChanged)
        
        hbox = QtGui.QHBoxLayout()
        hbox.addWidget(settings)
        hbox.addStretch(1)
        hbox.addWidget(add)
        hbox.addWidget(update)
        hbox.addStretch(1)
        hbox.addWidget(start)
        
        vbox = QtGui.QVBoxLayout()
        vbox.addWidget(self.table)
        vbox.addLayout(hbox)
        self.setLayout(vbox)
        
        self.loadCsv()
        self.updated = []

    def __del__(self):
        self.updater.terminate()
        
    def startWoW(self):
        os.system('env WINEDEBUG="-all" WINEPREFIX=$HOME/{} {} "C:\\{}\\{}" &'.format(prefix, bumbledict[bumblebee], wowinstalldir.replace("/", "\\"), bitdict[arch]))

    def createAddonsFileFromWowAddonsFolder(self):
        global addons
        parent = os.path.expanduser("~/{}/drive_c/{}/Interface/AddOns".format(prefix, wowinstalldir))
        contents = os.listdir(parent)
        for item in contents:
            if isdir("{}/{}".format(parent, item)) and not item.lower().startswith("blizzard_"):
                addons.append([item, 'http://www.curse.com/addons/wow/{}'.format(item.lower()), ''])
        addons = sorted(addons, key=lambda addon: addon[0])

    def loadCsv(self):
        try:
            with open(os.path.expanduser(ADDONS_FILE), 'rb') as csvfile:
                reader = csv.reader(csvfile, delimiter = ',')
                for row in reader:
                    addons.append(row)
        except:
            pass
        if len(addons) == 0:
            self.createAddonsFileFromWowAddonsFolder()

        self.table.setRowCount(len(addons))
        self.updateCells()
        self.table.resizeColumnsToContents()

    def handleItemChanged(self, row, column):
        item = self.table.item(row, column)
        if(row >= len(addons)):
            addons.append(['', '', '']);
        addons[row][column] = item.text()
        self.writeAddonsFile()
 
    def setCells(self, cells, row):
        for i in range(len(cells)):
            cell = QtGui.QTableWidgetItem(cells[i])
            self.table.setItem(row, i, cell)
        
    def updateCells(self):
        for i in range(len(addons)):
            if len(addons[i]) == 3:
                self.setCells(addons[i], i)
            else:
                self.setCells(['', addons[i], ''], i)
            
    def handleCheckingForUpdate(self, idx):
        print
        print currTime(), "Trying to update: ", addons[idx][0], "(", str(addons[idx][1] + '/download'), ")"
        item = self.table.item(idx, 1)
        item.setBackground(QtCore.Qt.blue)
        self.table.scrollTo(self.table.indexFromItem(item))

    def handleAddonNotFound(self, idx):
        print currTime(), "Error retrieving something from: ", addons[idx][1]
        self.table.item(idx, 1).setBackground(QtCore.Qt.red)

    def handleUpdated(self, idx):
        print currTime(), "Updated: ", addons[idx][0]
        self.updated.append(addons[idx][0])
        self.setCells(addons[idx], idx)
        self.table.item(idx, 1).setBackground(QtCore.Qt.green)
        self.table.resizeColumnsToContents()

    def handleNoUpdateNeeded(self, idx):
        print currTime(), "No Update needed: ", addons[idx][0]
        self.table.item(idx, 1).setBackground(QtCore.Qt.white)

    def handleFinished(self):
        print "Handle Finish called"
        if len(self.updated) == 0:
            message = 'All addons are up to date'
        else:
            self.writeAddonsFile()
            message = 'The following addons have been updated:'
            for element in self.updated:
                message = message + '\n' + element
        n = pynotify.Notification('Curse Updater', str(message))
        n.show()
 
    def updateAddons(self):
        self.updated = []
        self.updater.start()
        
    def writeAddonsFile(self):
        with open(os.path.expanduser(ADDONS_FILE), 'wb') as csvfile:
            csvwriter = csv.writer(csvfile, delimiter=',')
            for i in range(len(addons)):
                csvwriter.writerow(addons[i])

    def getNewAddon(self):
        self.table.insertRow(self.table.rowCount())

    def keyPressEvent(self, event):
        if event.matches(QtGui.QKeySequence.Delete):
            rows = []
            items = ""
            for item in self.table.selectedItems():
                if item.column() == 0:
                    items += item.text() + "\n"
                    rows.append(item.row())
            rows.sort(reverse=True)
            button = QtGui.QMessageBox.question(self, "Are you sure?", "Are you sure that you want to remove the following addon(s) from lcurse's list (the addon(s) will not be deleted from wow)?\n" + items, QtGui.QMessageBox.Ok | QtGui.QMessageBox.Cancel)
            if button == QtGui.QMessageBox.Ok:
                for row in rows:
                    print "Deleting row: ", row
                    addons.pop(row)
                    self.table.removeRow(row)
                self.writeAddonsFile()

class SettingsWindow(QtGui.QWidget):
    def __init__(self, parent = None):
        QtGui.QWidget.__init__(self, parent)
        
        self.resize(400, 300)
        self.setWindowTitle('Settings')
        self.setWindowIcon(QtGui.QIcon(windowIcon))
        
        screen = QtGui.QDesktopWidget().screenGeometry()
        size = self.geometry()
        self.move((screen.width()-size.width())/2, (screen.height()-size.height())/2)
        
        bumblebox = QtGui.QComboBox()
        bumblebox.addItems(['No Optimus', 'Yes, Primus-Backend', 'Yes, Bumblebee-Backend'])
        self.connect(bumblebox, QtCore.SIGNAL('activated(QString)'), self.bumble_chosen)
        dictionary = {'none': 0, 'primus': 1, 'bumblebee': 2}
        bumblebox.setCurrentIndex(dictionary[bumblebee])
        
        bitbox = QtGui.QComboBox()
        bitbox.addItems(['64 Bit', '32 Bit'])
        self.connect(bitbox, QtCore.SIGNAL('activated(QString)'), self.arch_chosen)
        dictionary = {64: 0, 32: 1}
        bitbox.setCurrentIndex(dictionary[arch])
        
        prefix_edit = QtGui.QLineEdit(prefix)
        prefix_edit.textChanged[str].connect(self.prefix_change)
        wowinstalldir_edit = QtGui.QLineEdit(wowinstalldir)
        wowinstalldir_edit.textChanged[str].connect(self.wowinstalldir_change)
        
        winecfg_prefix = QtGui.QPushButton(u'Open winecfg')
        self.connect(winecfg_prefix, QtCore.SIGNAL('clicked()'), self.winecfg)
        
        prefix_hbox = QtGui.QHBoxLayout()
        prefix_hbox.addWidget(QtGui.QLabel('$HOME/'))
        prefix_hbox.addWidget(prefix_edit)

        wowinstalldir_hbox = QtGui.QHBoxLayout()
        wowinstalldir_hbox.addWidget(QtGui.QLabel('drive_c/'))
        wowinstalldir_hbox.addWidget(wowinstalldir_edit)

        vbox = QtGui.QVBoxLayout()
        
        vbox.addWidget(QtGui.QLabel(u'Prefix:'))
        vbox.addLayout(prefix_hbox)
        vbox.addWidget(winecfg_prefix)
        vbox.addWidget(QtGui.QLabel(u'Wow Install Directory in wine:'))
        vbox.addLayout(wowinstalldir_hbox)
        vbox.addWidget(QtGui.QLabel('Optimus:'))
        vbox.addWidget(bumblebox)
        vbox.addWidget(QtGui.QLabel('Architecture:'))
        vbox.addWidget(bitbox)
        
        self.setLayout(vbox)

    def bumble_chosen(self, value):
        dictionary = {'No Optimus': 'none', 'Yes, Primus-Backend': 'primus', 'Yes, Bumblebee-Backend': 'bumblebee'}
        bumblebee = dictionary[str(value)]
        
        config.set('Settings', 'Bumblebee', bumblebee)
        self.updateConfigFile()
            
    def arch_chosen(self, value):
        dictionary = {'64 Bit': 64, '32 Bit': 32}
        arch = dictionary[str(value)]
        
        config.set('Settings', 'Arch', arch)
        self.updateConfigFile()
            
    def prefix_change(self, value):
        prefix = value
        
        config.set('Settings', 'Prefix', prefix)
        self.updateConfigFile()
            
    def wowinstalldir_change(self, value):
        wowinstalldir = value

        config.set('Settings', 'WowInstallDir', wowinstalldir)
        self.updateConfigFile()

    def updateConfigFile(self):
        with open(os.path.expanduser(SETTINGS_FILE), 'wb') as configfile:
            config.write(configfile)
            
    def winecfg(self):
        os.system('env WINEPREFIX=$HOME/{} winecfg &'.format(prefix))
        

app = QtGui.QApplication(sys.argv)

settings_widget = SettingsWindow()
widget = WoWCurseWindow()
widget.show()

sys.exit(app.exec_())
